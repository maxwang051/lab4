


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: ***Your Names**update this***
    3 00000000         ; Date Created: 1/22/2016 
    4 00000000         ; Last Modified: 1/22/2016 
    5 00000000         ; Section ***Tuesday 1-2***update this***
    6 00000000         ; Instructor: ***Ramesh Yerraballi**update this***
    7 00000000         ; Lab number: 4
    8 00000000         ; Brief description of the program
    9 00000000         ;   If the switch is presses, the LED toggles at 8 Hz
   10 00000000         ; Hardware connections
   11 00000000         ;  PE1 is switch input  (1 means pressed, 0 means not pr
                       essed)
   12 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard) 
   13 00000000         ;Overall functionality of this system is the similar to 
                       Lab 3, with three changes:
   14 00000000         ;1-  initialize SysTick with RELOAD 0x00FFFFFF 
   15 00000000         ;2-  add a heartbeat to PF2 that toggles every time thro
                       ugh loop 
   16 00000000         ;3-  add debugging dump of input, output, and time
   17 00000000         ; Operation
   18 00000000         ; 1) Make PE0 an output and make PE1 an input. 
   19 00000000         ; 2) The system starts with the LED on (make PE0 =1). 
   20 00000000         ;   3) Wait about 62 ms
   21 00000000         ;   4) If the switch is pressed (PE1 is 1), then toggle 
                       the LED once, else turn the LED on. 
   22 00000000         ;   5) Steps 3 and 4 are repeated over and over
   23 00000000         
   24 00000000         
   25 00000000         
   26 00000000 40024008 
                       SWITCH  EQU              0x40024008  ;PE1
   27 00000000 40024004 
                       LED     EQU              0x40024004  ;PE0
   28 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   29 00000000 00000010 
                       SYSCTL_RCGC2_GPIOE
                               EQU              0x00000010  ; port E Clock Gati
                                                            ng Control
   30 00000000 00000020 
                       SYSCTL_RCGC2_GPIOF
                               EQU              0x00000020  ; port F Clock Gati
                                                            ng Control
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 40024510 
                       GPIO_PORTE_PUR_R
                               EQU              0x40024510
   35 00000000 4002451C 
                       GPIO_PORTE_DEN_R



ARM Macro Assembler    Page 2 


                               EQU              0x4002451C
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   40 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   41 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   42 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   43 00000000 0003C8C0 
                       COUNT   EQU              0x0003C8C0
   44 00000000                 THUMB
   45 00000000                 AREA             DATA, ALIGN=4
   46 00000000 00000032 
                       SIZE    EQU              50
   47 00000000         ;You MUST use these two buffers and two variables
   48 00000000         ;You MUST not change their names
   49 00000000         ;These names MUST be exported
   50 00000000                 EXPORT           DataBuffer
   51 00000000                 EXPORT           TimeBuffer
   52 00000000                 EXPORT           DataPt [DATA,SIZE=4]
   53 00000000                 EXPORT           TimePt [DATA,SIZE=4]
   54 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DataBuffer
                               SPACE            SIZE*4
   55 000000C8 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TimeBuffer
                               SPACE            SIZE*4
   56 00000190 00 00 00 
              00       DataPt  SPACE            4
   57 00000194 00 00 00 
              00       TimePt  SPACE            4
   58 00000198         
   59 00000198         



ARM Macro Assembler    Page 5 


   60 00000198                 ALIGN
   61 00000198                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   62 00000000                 THUMB
   63 00000000                 EXPORT           Start
   64 00000000                 IMPORT           TExaS_Init
   65 00000000         
   66 00000000         
   67 00000000 F7FF FFFE 
                       Start   BL               TExaS_Init  ; running at 80 MHz
                                                            , scope voltmeter o
                                                            n PD3
   68 00000004 483D            LDR              R0, =SYSCTL_RCGCGPIO_R
   69 00000006 6801            LDR              R1, [R0]
   70 00000008 F041 0130       ORR              R1, #0x30
   71 0000000C 6001            STR              R1, [R0]
   72 0000000E BF00            NOP
   73 00000010 BF00            NOP
   74 00000012         ; initialize Port E
   75 00000012 483B            LDR              R0, =GPIO_PORTE_DIR_R
   76 00000014 6801            LDR              R1, [R0]
   77 00000016 F041 0101       ORR              R1, #0x01
   78 0000001A F021 0102       BIC              R1, #0x02
   79 0000001E 6001            STR              R1, [R0]
   80 00000020         
   81 00000020 4838            LDR              R0, =GPIO_PORTE_AFSEL_R
   82 00000022 6801            LDR              R1, [R0]
   83 00000024 F021 0103       BIC              R1, #0x03
   84 00000028 6001            STR              R1, [R0]
   85 0000002A         
   86 0000002A 4837            LDR              R0, =GPIO_PORTE_DEN_R
   87 0000002C 6801            LDR              R1, [R0]
   88 0000002E F041 0103       ORR              R1, #0x03
   89 00000032 6001            STR              R1, [R0]
   90 00000034         ; initialize Port F
   91 00000034 4835            LDR              R0, =GPIO_PORTF_DIR_R
   92 00000036 6801            LDR              R1, [R0]
   93 00000038 F041 0104       ORR              R1, #0x04
   94 0000003C 6001            STR              R1, [R0]
   95 0000003E         
   96 0000003E 4834            LDR              R0, =GPIO_PORTF_AFSEL_R
   97 00000040 6801            LDR              R1, [R0]
   98 00000042 F021 0104       BIC              R1, #0x04
   99 00000046 6001            STR              R1, [R0]
  100 00000048         
  101 00000048 4832            LDR              R0, =GPIO_PORTF_DEN_R
  102 0000004A 6801            LDR              R1, [R0]
  103 0000004C F041 0104       ORR              R1, #0x04
  104 00000050 6001            STR              R1, [R0]
  105 00000052         ; initialize debugging dump, including SysTick
  106 00000052 F000 F807       BL               Debug_Init  ; initialize buffer
                                                            s, buffer pointers,
                                                             and enable systick
                                                            
  107 00000056         
  108 00000056 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts - GETS STUCK 
                                                            HERE WHY???????????



ARM Macro Assembler    Page 6 


                                                            ????????
  109 00000058 F000 F82B 
                       loop    BL               Debug_Capture
  110 0000005C         ;heartbeat
  111 0000005C         ; Delay
  112 0000005C 482E            LDR              R0, =COUNT
  113 0000005E         again
  114 0000005E 3801            SUBS             R0, #1
  115 00000060 D1FD            BNE              again
  116 00000062         
  117 00000062 E7F9            B                loop
  118 00000064         
  119 00000064         
  120 00000064         ;------------Debug_Init------------
  121 00000064         ; Initializes the debugging instrument
  122 00000064         ; Input: none
  123 00000064         ; Output: none
  124 00000064         ; Modifies: none
  125 00000064         ; Note: push/pop an even number of registers so C compil
                       er is happy
  126 00000064         Debug_Init
  127 00000064         ; set buffers to 0xFFFFFFFF 
  128 00000064 F04F 0032       MOV              R0, #50     ; set count equal t
                                                            o number of element
                                                            s in array
  129 00000068 492C            LDR              R1, =DataBuffer ; R1 <- startin
                                                            g address of data a
                                                            rray
  130 0000006A 4A2D            LDR              R2, =TimeBuffer ; R2 <- startin
                                                            g address of time a
                                                            rray
  131 0000006C F04F 33FF       MOV              R3, #0xFFFFFFFF ; R3 <- data we
                                                            'll be storing
  132 00000070 2800    lp      CMP              R0, #0      ; reached end of ar
                                                            ray?
  133 00000072 D008            BEQ              L1          ; if yes, end loop
  134 00000074 600B            STR              R3, [R1]    ; otherwise store t
                                                            he data into the ad
                                                            dress held by R1 (c
                                                            urrent DATA array a
                                                            ddress)
  135 00000076 6013            STR              R3, [R2]    ; store the data in
                                                            to the address held
                                                             by R2 (current TIM
                                                            E array address)
  136 00000078 F101 0104       ADD              R1, #4      ; increment data ar
                                                            ray pointer to next
                                                             element
  137 0000007C F102 0204       ADD              R2, #4      ; increment time ar
                                                            ray pointer to next
                                                             element
  138 00000080 F1A0 0001       SUB              R0, #1      ; subtract 1 from c
                                                            ount
  139 00000084 E7F4            B                lp
  140 00000086         
  141 00000086         ; initialize pointers
  142 00000086 4827    L1      LDR              R0, =DataPt ; get address of da
                                                            ta pointer
  143 00000088 4924            LDR              R1, =DataBuffer ; get address o



ARM Macro Assembler    Page 7 


                                                            f first element
  144 0000008A 6001            STR              R1, [R0]    ; store address of 
                                                            first element in po
                                                            inter address
  145 0000008C         
  146 0000008C 4826            LDR              R0, =TimePt ; get address of ti
                                                            me pointer
  147 0000008E 4924            LDR              R1, =TimeBuffer ; get address o
                                                            f first element
  148 00000090 6001            STR              R1, [R0]    ; store address of 
                                                            first element in po
                                                            inter address
  149 00000092         
  150 00000092         ; init SysTick
  151 00000092         ; disable SysTick during setup
  152 00000092 4926            LDR              R1, =NVIC_ST_CTRL_R ; R1 = &NVI
                                                            C_ST_CTRL_R
  153 00000094 F04F 0000       MOV              R0, #0      ; R0 = 0
  154 00000098 6008            STR              R0, [R1]    ; [R1] = R0 = 0
  155 0000009A         ; maximum reload value
  156 0000009A 4925            LDR              R1, =NVIC_ST_RELOAD_R ; R1 = &N
                                                            VIC_ST_RELOAD_R
  157 0000009C 4825            LDR              R0, =0x00FFFFFF ; R0 = NVIC_ST_
                                                            RELOAD_M
  158 0000009E 6008            STR              R0, [R1]    ; [R1] = R0 = NVIC_
                                                            ST_RELOAD_M
  159 000000A0         ; any write to current clears it
  160 000000A0 4925            LDR              R1, =NVIC_ST_CURRENT_R ; R1 = &
                                                            NVIC_ST_CURRENT_R
  161 000000A2 F04F 0000       MOV              R0, #0      ; R0 = 0
  162 000000A6 6008            STR              R0, [R1]    ; [R1] = R0 = 0
  163 000000A8         ; enable SysTick with core clock
  164 000000A8 4920            LDR              R1, =NVIC_ST_CTRL_R ; R1 = &NVI
                                                            C_ST_CTRL_R
  165 000000AA F04F 0005       MOV              R0, #0x05
  166 000000AE 6008            STR              R0, [R1]    ; [R1] = R0 = (NVIC
                                                            _ST_CTRL_ENABLE|NVI
                                                            C_ST_CTRL_CLK_SRC)
  167 000000B0 4770            BX               LR
  168 000000B2         
  169 000000B2         ;------------Debug_Capture------------
  170 000000B2         ; Dump Port E and time into buffers
  171 000000B2         ; Input: none
  172 000000B2         ; Output: none
  173 000000B2         ; Modifies: none
  174 000000B2         ; Note: push/pop an even number of registers so C compil
                       er is happy
  175 000000B2         Debug_Capture
  176 000000B2 E92D 107F       PUSH             {R0, R1, R2, R3, R4, R5, R6, R1
2} 
                                                            ; push needed regis
                                                            ters to stack (R6 n
                                                            ot actually needed 
                                                            but has to be even 
                                                            number of registers
                                                            )
  177 000000B6 481B            LDR              R0, =DataPt ; R0 <- address of 
                                                            data array pointer 
                                                            to element



ARM Macro Assembler    Page 8 


  178 000000B8 491B            LDR              R1, =TimePt ; R1 <- address of 
                                                            time array pointer 
                                                            to element
  179 000000BA 6802            LDR              R2, [R0]    ; R2 <- data array 
                                                            pointer to element
  180 000000BC 680B            LDR              R3, [R1]    ; R3 <- time array 
                                                            pointer to element
  181 000000BE 4C18            LDR              R4, =TimeBuffer ; R4 <- startin
                                                            g address of array
  182 000000C0 F104 04C8       ADD              R4, #200    ; add 50 to get the
                                                             ending address of 
                                                            the array
  183 000000C4 42A3            CMP              R3, R4      ; check to see if w
                                                            e have gone past th
                                                            e bounds of the arr
                                                            ay
  184 000000C6 DC18            BGT              L2          ; if yes then retur
                                                            n
  185 000000C8         
  186 000000C8 4C1C            LDR              R4, =GPIO_PORTE_DATA_R ; R4 <- 
                                                            PORT E data address
                                                            
  187 000000CA 6825            LDR              R5, [R4]    ; R5 <- PORT E data
                                                            
  188 000000CC F025 05FC       BIC              R5, #0xFC   ; mask everything e
                                                            xcept PE0 and PE1
  189 000000D0 46AC            MOV              R12, R5     ; create a copy of 
                                                            the data into R12
  190 000000D2 F02C 0C01       BIC              R12, #0x01  ; clear everything 
                                                            but PE1
  191 000000D6 EA4F 0CCC       LSL              R12, #3     ; shift PE1 by 3 bi
                                                            ts
  192 000000DA EA4C 0505       ORR              R5, R12, R5 ; store the result 
                                                            back into R5
  193 000000DE F025 05EE       BIC              R5, #0xEE   ; get rid of the or
                                                            iginal PE1 that was
                                                             in bit 1
  194 000000E2 6015            STR              R5, [R2]    ; store data into d
                                                            ata array
  195 000000E4         
  196 000000E4 4C14            LDR              R4, =NVIC_ST_CURRENT_R ; R2 <- 
                                                            current clock time 
                                                            address
  197 000000E6 6825            LDR              R5, [R4]    ; R4 <- current clo
                                                            ck time
  198 000000E8 601D            STR              R5, [R3]    ; store current tim
                                                            e into the time arr
                                                            ay - hopefully - no
                                                            t sure this works
  199 000000EA         
  200 000000EA F102 0204       ADD              R2, #4      ; increment pointer
                                                            s 
  201 000000EE F103 0304       ADD              R3, #4
  202 000000F2 6002            STR              R2, [R0]    ; store updated poi
                                                            nters back into the
                                                             variables
  203 000000F4 600B            STR              R3, [R1]
  204 000000F6         
  205 000000F6 E8BD 107F       POP              {R0, R1, R2, R3, R4, R5, R6, R1



ARM Macro Assembler    Page 9 


2}
  206 000000FA         
  207 000000FA         
  208 000000FA 4770    L2      BX               LR
  209 000000FC         
  210 000000FC         
  211 000000FC                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  212 000000FC                 END                          ; end of file
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025400 
              40025420 
              4002551C 
              0003C8C0 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E010 
              E000E014 
              00FFFFFF 
              E000E018 
              400243FC 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__RTX SETA 1" --predefine="__EVAL SETA 1" --list=.\main
.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000000

Symbol: DataBuffer
   Definitions
      At line 54 in file main.s
   Uses
      At line 50 in file main.s
      At line 129 in file main.s
      At line 143 in file main.s

DataPt 00000190

Symbol: DataPt
   Definitions
      At line 56 in file main.s
   Uses
      At line 52 in file main.s
      At line 142 in file main.s
      At line 177 in file main.s

TimeBuffer 000000C8

Symbol: TimeBuffer
   Definitions
      At line 55 in file main.s
   Uses
      At line 51 in file main.s
      At line 130 in file main.s
      At line 147 in file main.s
      At line 181 in file main.s

TimePt 00000194

Symbol: TimePt
   Definitions
      At line 57 in file main.s
   Uses
      At line 53 in file main.s
      At line 146 in file main.s
      At line 178 in file main.s

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 61 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 000000B2

Symbol: Debug_Capture
   Definitions
      At line 175 in file main.s
   Uses
      At line 109 in file main.s
Comment: Debug_Capture used once
Debug_Init 00000064

Symbol: Debug_Init
   Definitions
      At line 126 in file main.s
   Uses
      At line 106 in file main.s
Comment: Debug_Init used once
L1 00000086

Symbol: L1
   Definitions
      At line 142 in file main.s
   Uses
      At line 133 in file main.s
Comment: L1 used once
L2 000000FA

Symbol: L2
   Definitions
      At line 208 in file main.s
   Uses
      At line 184 in file main.s
Comment: L2 used once
Start 00000000

Symbol: Start
   Definitions
      At line 67 in file main.s
   Uses
      At line 63 in file main.s
Comment: Start used once
again 0000005E

Symbol: again
   Definitions
      At line 113 in file main.s
   Uses
      At line 115 in file main.s
Comment: again used once
loop 00000058

Symbol: loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 109 in file main.s
   Uses
      At line 117 in file main.s
Comment: loop used once
lp 00000070

Symbol: lp
   Definitions
      At line 132 in file main.s
   Uses
      At line 139 in file main.s
Comment: lp used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COUNT 0003C8C0

Symbol: COUNT
   Definitions
      At line 43 in file main.s
   Uses
      At line 112 in file main.s
Comment: COUNT used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 81 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 186 in file main.s
Comment: GPIO_PORTE_DATA_R used once
GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 86 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 75 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTE_PUR_R 40024510

Symbol: GPIO_PORTE_PUR_R
   Definitions
      At line 34 in file main.s
   Uses
      None
Comment: GPIO_PORTE_PUR_R unused
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 96 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 101 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 91 in file main.s
Comment: GPIO_PORTF_DIR_R used once
LED 40024004

Symbol: LED
   Definitions
      At line 27 in file main.s
   Uses
      None
Comment: LED unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 152 in file main.s
      At line 164 in file main.s

NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 160 in file main.s
      At line 196 in file main.s

NVIC_ST_RELOAD_R E000E014

Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 156 in file main.s
Comment: NVIC_ST_RELOAD_R used once
SIZE 00000032

Symbol: SIZE
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 46 in file main.s
   Uses
      At line 54 in file main.s
      At line 55 in file main.s

SWITCH 40024008

Symbol: SWITCH
   Definitions
      At line 26 in file main.s
   Uses
      None
Comment: SWITCH unused
SYSCTL_RCGC2_GPIOE 00000010

Symbol: SYSCTL_RCGC2_GPIOE
   Definitions
      At line 29 in file main.s
   Uses
      None
Comment: SYSCTL_RCGC2_GPIOE unused
SYSCTL_RCGC2_GPIOF 00000020

Symbol: SYSCTL_RCGC2_GPIOF
   Definitions
      At line 30 in file main.s
   Uses
      None
Comment: SYSCTL_RCGC2_GPIOF unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 28 in file main.s
   Uses
      At line 68 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 64 in file main.s
   Uses
      At line 67 in file main.s
Comment: TExaS_Init used once
1 symbol
368 symbols in table
